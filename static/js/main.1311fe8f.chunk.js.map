{"version":3,"sources":["views/Flames.js","views/Home.js","App.js","serviceWorker.js","index.js"],"names":["Flames","App","Home","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yQAmGeA,IChGA,aACb,OACE,oCACE,6CCgBSC,EAfH,WACV,OACE,kBAACC,EAAD,OCGgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCZNC,IAASC,OAEL,kBAAC,EAAD,MAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1311fe8f.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Row,Col,Card,CardTitle,CardText,Button} from \"reactstrap\";\r\nimport {InputBox,ModalBox} from \"../components/flames/\";\r\n\r\nfunction Flames() {\r\n  const [name1, setName1] = React.useState(\"\");\r\n  const [name2, setName2] = React.useState(\"\");\r\n  const [showModal,setShowModal] = React.useState(false);\r\n  const [result,setResult] = React.useState(\"\");\r\n\r\n  const handleCalculation = ()=>{\r\n    const name1Array = name1.toLowerCase().split(\"\");\r\n    const name2Array = name2.toLowerCase().split(\"\");\r\n\r\n    const name1Chars = [];\r\n    const name2Chars = [];\r\n\r\n    name1Array.forEach((char)=>{\r\n      if(name2Array.includes(char) && char!==\" \"){\r\n        name2Chars.push(char)\r\n      }\r\n    })\r\n\r\n    name2Array.forEach((char)=>{\r\n      if(name1Array.includes(char) && char!==\" \"){\r\n        name1Chars.push(char)\r\n      }\r\n    })\r\n\r\n    const nameTotal = name1Chars.length + name2Chars.length\r\n\r\n    switch(nameTotal%6){\r\n      case 1:\r\n        setResult(\"Friends\");\r\n        break;\r\n      case 2:\r\n        setResult(\"Lovers\");\r\n        break;\r\n      case 3:\r\n        setResult(\"Acquaintances\");\r\n        break;\r\n      case 4:\r\n        setResult(\"Marriage\");\r\n        break;\r\n      case 5:\r\n        setResult(\"Enemies\");\r\n        break;\r\n      default:\r\n        setResult(nameTotal!==0 ? \"Soulmate\" : \"No match\");\r\n        break;\r\n    }\r\n    setShowModal(true);\r\n  }\r\n\r\n  return (\r\n    <div className=\"\">\r\n      <Row>\r\n        <Col sm=\"8\" md=\"6\" xl=\"4\" className=\"m-auto vh-100 d-flex align-items-center\">\r\n          <Card body>\r\n            <CardTitle><h3 className=\"text-center\">WELCOME TO FLAMES</h3></CardTitle>\r\n            <CardText className=\"text-center\">\r\n              The rule is very simple. Just type your crush's full name and your full name then click the submit button to show the result.\r\n            </CardText>\r\n            <h4>Love Calculator</h4>\r\n            <InputBox\r\n              label1=\"Enter your crush's name\"\r\n              label2=\"Name is\"\r\n              setName={setName1}\r\n              name={name1}\r\n            />\r\n            <InputBox\r\n              label1=\"Enter your full name\"\r\n              label2=\"Your name is\"\r\n              setName={setName2}\r\n              name={name2}\r\n            />\r\n            <Button\r\n              size=\"md\"\r\n              color=\"success\"\r\n              className=\"text-white w-25 mx-auto\"\r\n              onClick={handleCalculation}\r\n            >\r\n              Calculate\r\n            </Button>\r\n\r\n          </Card>\r\n        </Col>\r\n        <ModalBox\r\n          showModal = {showModal}\r\n          setShowModal = {setShowModal}\r\n          result = {result}\r\n          setName1={setName1}\r\n          setName2={setName2}\r\n        />\r\n      </Row>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Flames;","import React from \"react\";\r\nimport { Link } from \"react-router-dom\"\r\n\r\nexport default ()=>{\r\n  return(\r\n    <>\r\n      <h1>Hello World</h1>\r\n      {/* <Link\r\n        to={\"/flames\"}\r\n      >Flames</Link>\r\n      <Link\r\n        to={\"/calculator\"}\r\n      >Calculator</Link> */}\r\n    </>\r\n  )\r\n}","import React from \"react\";\nimport Flames from \"./views/Flames\";\nimport BillDivider from \"./views/BillDivider\";\nimport Calculator from \"./views/Calculator\"\nimport Home from \"./views/Home\";\nimport {BrowserRouter,Switch,Route} from \"react-router-dom\";\n\nconst App = ()=>{\n  return(\n    <Home/>\n    // <BrowserRouter>\n    //   <Switch>\n    //     <Route path=\"/\" component={Home} exact />\n    //     <Route path=\"/flames\" component={Flames} strict />\n    //     <Route path=\"/billdivider\" component={BillDivider} strict/>\n    //     <Route path=\"/calculator\" component={Calculator} strict/>\n    //   </Switch>\n    // </BrowserRouter>\n\n  )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}